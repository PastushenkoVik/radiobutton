{"version":3,"sources":["components/ColorRadioButton/ColorRadioButton.jsx","components/ColorRadioButtons/ColorRadioButtons.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ColorRadioButton","radioButtonHandler","buttonSelectedHandler","id","name","isSelect","htmlFor","className","onClick","type","checked","ColorRadioButtons","radioItems","useState","borderColor","changeBorderColor","setBorderColor","colorName","map","radioItem","key","shortid","generate","colorItems","App","colorRadioItems","setColorRadioItems","src","logo","alt","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0RAuBeA,G,YAnBU,SAAC,GAAuE,IAArEC,EAAoE,EAApEA,mBAAoBC,EAAgD,EAAhDA,sBAAuBC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAE7E,OACI,2BACKC,QAASF,EACVG,UAAU,qBACVC,QAAS,WACLP,EAAmBG,GACnBF,EAAsBC,KAE1B,0BAAMI,UAAS,sBAAiBH,IAASA,GACxCC,EACK,2BAAOF,GAAIC,EAAMK,KAAK,QAAQL,KAAK,QAAQM,SAAO,IAClD,2BAAOP,GAAIC,EAAMK,KAAK,QAAQL,KAAK,aCStCO,EApBW,SAAC,GAA2C,IAAzCT,EAAwC,EAAxCA,sBAAuBU,EAAiB,EAAjBA,WAAiB,EACxBC,mBAAS,IADe,mBAC1DC,EAD0D,KAC7CC,EAD6C,KAGjE,SAASC,EAAeC,GACpBF,EAAkB,4BAAD,OAA6BE,IAGlD,OACI,0BAAMV,UAAS,4BAAuBO,IAClC,yBAAKP,UAAU,iBACVK,EAAWM,KAAI,SAACC,GAAD,OAAgB,kBAAC,EAAD,eAC5BC,IAAKC,IAAQC,WACbrB,mBAAoBe,EACpBd,sBAAuBA,GACnBiB,UCflBI,EAAa,CACjB,CACEpB,GAAI,EACJC,KAAM,OACNC,UAAU,GAEZ,CACEF,GAAI,EACJC,KAAM,MACNC,UAAU,GAEZ,CACEF,GAAI,EACJC,KAAM,QACNC,UAAU,IAqBCmB,MAjBf,WAAgB,IAAD,EACiCX,mBAASU,GAD1C,mBACNE,EADM,KACWC,EADX,KAOb,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKoB,IAAKC,IAAMrB,UAAU,WAAWsB,IAAI,SACzC,kBAAC,EAAD,CAAmB3B,sBARzB,SAA4BC,GAC1BuB,EAAmBH,EAAWL,KAAI,SAACY,GAAD,sBAAgBA,EAAhB,CAAsBzB,SAAUyB,EAAK3B,KAAOA,SAOZS,WAAYa,OCtB9DM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.f1d90237.chunk.js","sourcesContent":["import React from 'react';\n\nimport './ColorRadioButton.scss';\n\nconst ColorRadioButton = ({ radioButtonHandler, buttonSelectedHandler, id, name, isSelect }) => {\n\n    return (\n        <label\n             htmlFor={name} \n            className=\"color-radio-button\"\n            onClick={() => {\n                radioButtonHandler(name);\n                buttonSelectedHandler(id);\n            }}>\n            <span className={`color-radio-${name}`}>{name}</span>\n            {isSelect\n                ? <input id={name} type=\"radio\" name=\"color\" checked/>\n                : <input id={name} type=\"radio\" name=\"color\"/>\n            }\n        </label>\n    );\n};\n\nexport default ColorRadioButton;","import React, { useState } from 'react';\nimport shortid from 'shortid';\n\nimport './ColorRadioButtons.scss';\nimport ColorRadioButton from '../ColorRadioButton/ColorRadioButton';\n\nconst ColorRadioButtons = ({ buttonSelectedHandler, radioItems }) => {\n    const [borderColor, changeBorderColor] = useState('');\n\n    function setBorderColor(colorName) {\n        changeBorderColor(`color-radiobutton-border-${colorName}`);\n    };\n\n    return (\n        <form className={`color-radiobutton ${borderColor}`}>\n            <div className=\"color-wrapper\">\n                {radioItems.map((radioItem) => (<ColorRadioButton \n                    key={shortid.generate()} \n                    radioButtonHandler={setBorderColor} \n                    buttonSelectedHandler={buttonSelectedHandler}\n                    {...radioItem} />))}            \n            </div>\n        </form>\n    );\n};\n\nexport default ColorRadioButtons;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport ColorRadioButtons from './components/ColorRadioButtons/ColorRadioButtons';\n\nconst colorItems = [\n  {\n    id: 0,\n    name: 'blue',\n    isSelect: false,\n  },\n  {\n    id: 1,\n    name: 'red',\n    isSelect: false,\n  },\n  {\n    id: 2,\n    name: 'green',\n    isSelect: false,\n  },\n];\n\nfunction App() {\n  const [colorRadioItems, setColorRadioItems] = useState(colorItems);\n\n  function changeColorHandler(id) {\n    setColorRadioItems(colorItems.map((item) => ({ ...item, isSelect: item.id === id ? true : false})));\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <ColorRadioButtons buttonSelectedHandler={changeColorHandler} radioItems={colorRadioItems} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}